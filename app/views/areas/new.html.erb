<style>
  /* Always set the map height explicitly to define the size of the div
   * element that contains the map. */
  #map {
    height: 75%;
    margin: 0 0 50px 0;
  }
  /* Optional: Makes the sample page fill the window. */
  html, body {
    height: 100%;
    margin: 0;
    padding: 0;
  }
</style>
<div id="map"></div>
<%= form_for @area, remote: true,  html: {id: "areaForm"} do |f| %>
<%= f.label :title %>
<%= f.text_field :title %>
<%= f.file_field :attachment %>
<%= f.select :level, ['L0', 'L1', 'L2', "L3"] %>
<%= f.submit %>
<% end %>
<script>
  function initMap() {
    map = new google.maps.Map(document.getElementById('map'), {
      center: {lat: 33.481347, lng: -111.9751887},
      zoom: 18
    });
    var drawingManager = new google.maps.drawing.DrawingManager({
      // drawingMode: google.maps.drawing.OverlayType.POLYGON,
      drawingControl: true,
      drawingControlOptions: {
        position: google.maps.ControlPosition.TOP_CENTER,
        drawingModes: ['polygon', 'rectangle']
      },
      // markerOptions: {icon: 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png'},
      rectangleOptions: {
        fillColor: '#ffff00',
        fillOpacity: .1,
        strokeWeight: 1,
        clickable: false,
        editable: false,
        zIndex: 1
      },
      polygonOptions: {
        fillColor: '#ffff00',
        fillOpacity: .1,
        strokeWeight: 1,
        clickable: false,
        editable: false,
        zIndex: 1
      }
    });
    drawingManager.setMap(map);
    google.maps.event.addListener(drawingManager, 'overlaycomplete', function(event) {
      if (event.type == 'rectangle') {
        var bounds = event.overlay.getBounds();
        var polygon_bounds = [
          [
            bounds.getNorthEast().lat(), 
            bounds.getNorthEast().lng()
          ], 
          [
            bounds.getSouthWest().lat(), 
            bounds.getSouthWest().lng()
          ]
        ]
      }else if (event.type == 'polygon') {
        var points = event.overlay.getPath().b;
        var polygon_bounds = points.map(function(event) {
          var latlng = [event.lat(), event.lng()]
          return latlng
        });
      }
      var thing = document.getElementById("areaForm")
      // loop to add the input elements after an overlay is created
      for (var i = 0; i < polygon_bounds.length; i++) {
        var lat = polygon_bounds[i][0];
        var lng = polygon_bounds[i][1];
        var point_input = document.createElement("input");
        point_input.setAttribute("type", "text")
        point_input.setAttribute("name", "area[area_profile][]")
        point_input.setAttribute("value", [lat, lng])
        thing.appendChild(point_input)
      }
      // infowindow.open(map, event.overlay);
    });
    var levelColor = {
      L0: {
        strokeColor: '#00eebc',
        fillColor: '#00eebc',
      },
      L1: {
        strokeColor: '#00eebc',
        fillColor: '#00eebc',
      },
      L2: {
        strokeColor: '#BFBFBF',
        fillColor: '#BFBFBF',
      },
      L3: {
        strokeColor: '#622662',
        fillColor: '#622662',
      }
    };
  var features = <%= @areas.to_json.html_safe %>
  // Construct the polygon.
  function addPolygon(feature) {
    var area = new google.maps.Polygon({
      paths: feature.coords,
      strokeColor: levelColor[feature.level].strokeColor,
      strokeOpacity: 0.8,
      strokeWeight: 3,
      fillColor: levelColor[feature.level].fillColor,
      fillOpacity: 0.1,
      editable: false,
      map: map
    });
    google.maps.event.addListener(area, "click", function(event) {
      var vertices = this.getPath();
      var contentString = '<b>'+ feature.title +'</b><br>' + '<a href="/areas/' + feature.id + '">click me</a><br>' +
          'Clicked location: <br>' + event.latLng.lat() + ',' + event.latLng.lng() +
          '<br>';
      // Iterate over the vertices.
      for (var i =0; i < vertices.getLength(); i++) {
        var xy = vertices.getAt(i);
        contentString += '<br>' + 'Coordinate ' + i + ':<br>' + xy.lat() + ',' +
            xy.lng();
      }
      // Replace the info window's content and position.
      infoWindow.setContent(contentString);
      infoWindow.setPosition(event.latLng);
      infoWindow.open(map);
    });
  }
  for (var i = 0, feature; feature = features[i]; i++) {
    // console.log(feature);
    addPolygon(feature);
  }
  infoWindow = new google.maps.InfoWindow;
  }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAU7vv1IU0p7UKr8YiKASuKXKn7ptBrcUk&libraries=drawing&callback=initMap"
     async defer></script>